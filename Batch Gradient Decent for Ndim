from sklearn.datasets import load_diabetes
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
from sklearn.model_selection import train_test_split

import numpy as np

df = load_diabetes()

X,y = load_diabetes(return_X_y= True)

X_train,X_test,y_train,y_test = train_test_split(X,y , test_size=0.2 , random_state=2)



reg = LinearRegression()
reg.fit(X_train,y_train)

y_pred = reg.predict(X_test)
r2_score(y_test , y_pred)

class GradientDecentNdim:
  def __init__(self,epochs,learningRate):
    self.epochs  = epochs
    self.lr = learningRate
    self.coef_= None
    self.intercept_ = None

  def fit(self , X_train ,y_train):
    self.intercept_ = 0
    self.coef_ = np.ones(X_train.shape[1])

    for _ in range(self.epochs):
      y_hat = np.dot(X_train , self.coef_)+ self.intercept_
      intercept_def = -2 * np.mean(y_train - y_hat)
      self.intercept_ = self.intercept_ - (self.lr * intercept_def)
      coef_def = -2 * np.dot((y_train - y_hat),X_train)/X_train.shape[0]
      self.coef_ = self.coef_ - (self.lr * coef_def)
    print(self.intercept_ , self.coef_)

  def predict(self,X_test):
    return np.dot(X_test , self.coef_) + self.intercept_


gd = GradientDecentNdim(1000,0.7)

gd.fit(X_train,y_train)

hh = gd.predict(X_test)

r2_score(y_test , hh)

